library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
# Create a phyloseq subset for the genus Sterocaulon
physeq.ste <-  subset_samples(ps.rarefied, host_genus == "Stereocaulon")
########### ALPHA DIVERSITY #################
# ASV TABLE
otu_ste <- otu.data.table(physeq.ste)
otu_ste <- column_to_rownames(otu_ste, var = "Sample")
# Metadata
meta_ste <- sample.data.table(physeq.ste)
# Estimate diversity indexes
data_richness <- estimateR(t(otu_ste))                                          # calculate richness and Chao1 using vegan package
data_evenness <- vegan::diversity(t(otu_ste)) / log(specnumber(t(otu_ste)))     # calculate evenness index using vegan package
data_shannon <- vegan::diversity(t(otu_ste), index = "shannon")                 # calculate Shannon index using vegan package
data_alphadiv <- cbind(meta_ste, t(data_richness), data_shannon, data_evenness) # combine all indices in one data table
rm(data_richness, data_evenness, data_shannon)
View(data_alphadiv)
#title: "Liquenes_anÃ¡lisis_16S"
#author: "Alejandra Ulloa"
#date: '2023-04-18'
## This script was used to make the feature selection of samples and ASVs
## to be used in the rest of the analysis. The idea was to remove NA, NULL
#values, ASVs corresponding to Archaea, Eukaryota and Unassigned
#Load packages to be used
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
######## Import objects for 16S data sets ##########
# ASV table
table_16S <- read.delim2("Raw_data/table-16S.tsv")
asv_counts <- column_to_rownames(table_16S, var = colnames(table_16S)[1])
# Taxonomy
taxmat_16S <- read.delim2("Raw_data/taxonomy-16S.tsv")
taxmat_16S <- taxmat_16S %>% column_to_rownames(var = "Feature.ID")
# Sample metadata
sampledata_16S <- read.delim2("Raw_data/metadata_updated.tsv")
rownames(sampledata_16S) <- sampledata_16S$sample.id
# Phylogenetic tree - rooted
tree_16S = read.tree("Raw_data/tree-16S.nwk")
#################### Phyloseq ############################
# Create Phyloseq objects
OTU_16S = otu_table(asv_counts, taxa_are_rows = TRUE)
TAX_16S = tax_table(as.matrix(taxmat_16S))
Samples_16S = sample_data(sampledata_16S)
# Merge into phyloseq objects
physeq16s = phyloseq(OTU_16S, TAX_16S,Samples_16S)
# Add tree to phyloseq object
ps_16S = merge_phyloseq(physeq16s, tree_16S)
# Feature selection
unique(tax_table(ps_16S)[, "Domain"])
table(tax_table(ps_16S)[, "Domain"], exclude = NULL)
## Remove Archaea, Eukaryota and Unassigned
ps <- subset_taxa(ps_16S, !is.na(Domain) & !Domain %in%
c("Unassigned", "d__Eukaryota", "d__Archaea"))
table(tax_table(ps)[, "Domain"], exclude = NULL)
## Filtering NA taxa or low abundant taxa phylum
ps <- subset_taxa(ps, !is.na(Phylum) & !Phylum %in% c(""))
### Class
ps <- subset_taxa(ps, !is.na(Class) & !Class %in% c(""))
### Order
ps <- subset_taxa(ps, !is.na(Order) & !Order %in% c("","o__Chloroplast"))
###Family
ps <- subset_taxa(ps, !is.na(Family) & !Family %in% c("","f__Mitochondria"))
###Genus
ps <- subset_taxa(ps, !is.na(Genus) & !Genus %in% c(""))
###### Update Phyloseq object with samples to remove ######
#First, create a list of the samples that you want to remove
Samples_toRemove <- c("Sample11", "Sample16", "Sample25",
"Sample43", "Sample44", "Sample46",
"Sample50", "Sample52", "Sample56",
"Sample63", "Sample78", "Sample79", "Sample62",
"Sample81", "Sample87", "Sample88", "Sample32",
"Sample131", "Sample136", "Sample146", "Sample152")
# To see what samples get removed, run the following; note, I have a column called "SampleID"
subset_samples(ps, sample.id %in% Samples_toRemove)
# This will return a ps object that contains the samples you want to remove
# To remove those from your phyloseq object
ps <- subset_samples(ps, !(sample.id %in% Samples_toRemove))
# This will return a ps object with the samples removed
# Fix tax table for Microviz
ps <- ps %>% tax_fix()
# Add column to tax table
tax_table(ps) <- cbind(tax_table(ps),rownames(tax_table(ps)))
# Add ASVs to tax table as column
colnames(tax_table(ps)) <-
c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "ASVID")
# Rarefraction curves
sum_before <- sample_sums(ps)
#
otu_all <- otu.data.table(ps) %>% column_to_rownames(var = "Sample")
## Rarefraction curve
min_value <- min(rowSums(t(otu_all)))
## Histogram of read distribution
df <- data.frame(ASVs=rowSums(t(otu_table(ps))>0), reads=sample_sums(ps), sample_data(ps))
#write.table(df, "Before-rarefraction-read-data.txt", sep = ",")
hist.reads <- ggplot(df, aes(x=reads)) +
geom_histogram(bins=50, color='black', fill='grey') +
theme_bw()  +
geom_vline(xintercept=1800, color= "red", linetype='dashed') +
labs(title="Histogram: Reads per sample") +
xlab("Read Count") +
ylab("Sample Count")
## Plot
rarecurve_data <- rarecurve(t(otu_all),
step=100 ,
lwd=2,
ylab="ASVs",
label=F,
xlim=c(0, 5000),
ylim=c(0,300),
main="Rarefaction Curve for all samples")
plot.colors <- c(pal_aaas(palette= c("default"), alpha = 1)(10),
pal_futurama(palette = c("planetexpress"), alpha = 1)(10),
pal_cosmic(palette = c("hallmarks_light"))(10),
pal_npg(palette = c("nrc"), alpha = 1)(10),
brewer.pal(11,"BrBG"),
brewer.pal(11, "PiYG"),
brewer.pal(11, "PRGn"),
brewer.pal(11, "PuOr"),
brewer.pal(11, "RdBu"),
brewer.pal(11, "RdGy"),
brewer.pal(11, "RdYlBu"),
brewer.pal(11, "RdYlGn")
)
pdf("Rarefraction-curves.pdf",
width = 7,
height = 5
)
map_dfr(rarecurve_data, bind_rows) %>%
bind_cols(Group = row.names(t(otu_all))) %>%
pivot_longer(-Group) %>%
drop_na() %>%
mutate(n_seqs = as.numeric(str_replace(name, "N", ""))) %>%
ggplot(aes(x=n_seqs, y=value, color =Group)) +
geom_line(show.legend = FALSE) +
scale_color_manual(values = plot.colors) +
ggtitle("Rarefraction curves") +
labs(x = "Sample size", y= "ASVs Count") +
theme_bw()
dev.off()
# Rarefy
set.seed(1)  #For a reproducible code
ps.rarefied <- rarefy_even_depth(ps, rngseed=1, sample.size=1900, replace=F)
#Sample117Sample138Sample54 were remove.
#1061 OTUs were removed because they are no longer present in any sample after random subsampling
#New otu-table
otu_rarefy <- otu.data.table(ps.rarefied)
otu_rarefy <- column_to_rownames(otu_rarefy, var = "Sample")
##Metadata
meta_all <- sample.data.table(ps.rarefied)
#Save data for next analysis
save(ps.rarefied,otu_rarefy, meta_all, file="Lichens_clean.RData")
#This script was used to analyze samples of the genus Stereocualon
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
# Create a phyloseq subset for the genus Sterocaulon
physeq.ste <-  subset_samples(ps.rarefied, host_genus == "Stereocaulon")
########### ALPHA DIVERSITY #################
# ASV TABLE
otu_ste <- otu.data.table(physeq.ste)
otu_ste <- column_to_rownames(otu_ste, var = "Sample")
# Metadata
meta_ste <- sample.data.table(physeq.ste)
# Estimate diversity indexes
data_richness <- estimateR(t(otu_ste))                                          # calculate richness and Chao1 using vegan package
data_evenness <- vegan::diversity(t(otu_ste)) / log(specnumber(t(otu_ste)))     # calculate evenness index using vegan package
data_shannon <- vegan::diversity(t(otu_ste), index = "shannon")                 # calculate Shannon index using vegan package
data_alphadiv <- cbind(meta_ste, t(data_richness), data_shannon, data_evenness) # combine all indices in one data table
rm(data_richness, data_evenness, data_shannon)
View(data_alphadiv)
anova.site = aov(data_shannon ~ species.checked, data = data_alphadiv)
summary(anova.site)
TukeyHSD(anova.site)
P1 <- ggplot(data_alphadiv, aes(x=species.checked, y=S.chao1)) +
geom_boxplot() +
labs(title= 'Chao1', x= ' ', y= '', tag = "A") +
geom_point() +
theme_classic()
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
View(otu_rarefy)
#Calculate the relative abundance
ps <- transform_sample_counts(ps.rarefied, function(x) x / sum(x))
ps <- transform_sample_counts(ps.rarefied, function(x) x / sum(x))
ps.ab <- psmelt(ps)
ps.ab <- filter(ps.ab, Abundance > 0)
View(ps.ab)
#This is where the mean is calculated and the taxa to display is chosen
cluster_ps <- aggregate(Abundance ~ OTU + Family ,data=ps.ab, mean)
View(cluster_ps)
# filtering and picking the number to display
cluster_ps_st = cluster_ps_st[order(-cluster_ps_st$Abundance),][1:1000,]
View(cluster_ps)
# filtering and picking the number to display
cluster_ps = cluster_ps[order(-cluster_ps$Abundance),][1:1000,]
View(cluster_ps)
View(cluster_ps)
ggplot(cluster_ps, aes(x = reorder(OTU, -Abundance),y = Abundance)) +
geom_bar(aes(color = Family), size = 3) +
xlab("Rank") +
#scale_y_continuous(breaks = c(0.01:0.3)) +
theme_bw()
ggplot(cluster_ps, aes(x = reorder(OTU, -Abundance), y = Abundance)) +
geom_col(aes(color = Family), linewidth = 1) +
xlab("Rank") +
theme_bw()
#Calculate the relative abundance
ps <- transform_sample_counts(ps.rarefied, function(x) x / sum(x))
ps.ab <- psmelt(ps)
ps.ab <- filter(ps.ab, Abundance > 0.01)
#This is where the mean is calculated and the taxa to display is chosen
cluster_ps <- aggregate(Abundance ~ OTU + Family ,data=ps.ab, mean)
# filtering and picking the number to display
cluster_ps = cluster_ps[order(-cluster_ps$Abundance),][1:200,]
ggplot(cluster_ps, aes(x = reorder(OTU, -Abundance), y = Abundance)) +
geom_col(aes(color = Family), linewidth = 1) +
xlab("Rank") +
theme_bw()
View(cluster_ps)
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
#################################################################################
###### Rank of abundance  #######################
#Calculate the relative abundance
ps <- transform_sample_counts(ps.rarefied, function(x) x / sum(x))
ps.ab <- psmelt(ps)
ps.ab <- filter(ps.ab, Abundance > 0.01)
#This is where the mean is calculated and the taxa to display is chosen
cluster_ps <- aggregate(Abundance ~ OTU + Family ,data=ps.ab, mean)
# filtering and picking the number to display
cluster_ps = cluster_ps[order(-cluster_ps$Abundance),][1:200,]
ggplot(cluster_ps, aes(x = reorder(OTU, -Abundance), y = Abundance)) +
geom_col(aes(color = Family), linewidth = 1) +
xlab("Rank") +
theme_bw()
top10 <- cluster_ps[1:9,]
View(top10)
mean_top10 <- aggregate(Abundance, data = top10, mean)
View(top10)
top10
mean_top10 <- mean(top10$Abundance)
View(cluster_ps)
top10 <- cluster_ps[1:20,]
top10
mean_aceto <- top10 %>% aggregate(Abundance ~ Family = "f__Acetobacteraceae", mean)
mean_aceto <- top10 %>% filter(Family = "f__Acetobacteraceae") %>%
mean()
mean_aceto <- top10 %>% filter(Family = "f__Acetobacteraceae")
mean_aceto <- top10 %>% filter(Family == "f__Acetobacteraceae")
mean(mean_aceto$Abundance)
mean_sping <- top10 %>% filter(Family == "f__Sphingobacteriaceae")
mean(mean_sping$Abundance)
View(mean_sping)
#title: "Liquenes_anÃ¡lisis_16S"
#author: "Alejandra Ulloa"
#This script creates the ASV heatmap for the most abundant families and those
#present in the biplot.
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
######## Import clean phyloseq object ##########
load("Lichens_clean.RData")
######################## Heatmap of most abundant ASVs within 8 families #################################
#Calculate the relative abundance
abundant.asv <-  ps.rarefied %>%
tax_mutate(Species = NULL) %>%
tax_select(c("f__Acetobacteraceae",
"f__Acidobacteriaceae_(Subgroup_1)",
"f__Beijerinckiaceae",
"f__Caulobacteraceae" ,
"f__Sphingobacteriaceae",
"f__Sphingomonadaceae",
"f__Nostocaceae",
"f__Deinococcaceae")) %>%
tax_top(n = 30, by = mean, rank = "unique", use_counts = FALSE)
ps.rarefied.abd <-  ps.rarefied %>%
tax_mutate(Species = NULL) %>%
tax_select(abundant.asv) %>%
tax_fix() %>%
tax_fix(unknowns = c("f__uncultured")) %>%
tax_transform("compositional")
##Heatmap with Complex heatmaps
library(ComplexHeatmap)
#Abundance table
abd.tab <- otu.data.table(ps.rarefied.abd)
# Create a common identifier column
abd.tab$CommonID <- 1:nrow(abd.tab)
#Add column with new names
abd.tab$ASV_ID <- paste("asv", 1:nrow(abd.tab), sep = "")
#Tax_table add new names to they match with the otu table
tax.t <- taxa.data.table(ps.rarefied.abd)
tax.t$CommonID <- 1:nrow(tax.t)
tax.t$ASV_ID <- paste("asv", tax.t$CommonID, sep = "")
#Edit abundance table
abd.tab <- column_to_rownames(abd.tab, var = "ASV_ID")
abd.tab <- abd.tab[,c(-1,-120)]  #Remove "Sample" and "common identifier" columns
abd.matrix <- as.matrix(abd.tab)
#Heatmap annotations
genus <- sample.data.frame(ps.rarefied.abd)
# Abundance colors
palette_blues <- colorRampPalette(colors = c("white", "#00838EFF"))(9)
#Anotate samples according to the genus they belong to and selection of colors to use
anot = HeatmapAnnotation(Genus = genus$host_genus, col = list(Genus = c("Cora" = "#1B9E77",
"Stereocaulon" = "#D95F02",
"Sticta"= "#7570B3"), which="col"))
#Anotate samples according to the genus they belong to and selection of colors to use
anot2 = HeatmapAnnotation(Species = genus$species.checked,
col = list(Species = c("Cora accipiter" ="#00685BFF",
"Cora aturuoca" = "#1B849E",
"Cora celestinoa" = "#1B9E77",
"Cora davidia" = "#7FCBC4FF",
"Cora dewisanti" = "#B2DFDAFF",
"Cora paraciferrii" = "#32533d",
"Cora spec Moncada 021" = "#307351",
"Cora spec Moncada 024" = "#83b692",
"Cora spec Moncada 095-096" = "#8cc7a1",
"Cora subdavidcrinita" = "#ccddb7",
"Stereocaulon alpinum" = "#E55100FF",
"Stereocaulon ramulosum" = "#FF9800FF",
"Stereocaulon novogranatense" = "#fff275",
"Sticta aff cellulosa" = "#4b2142",
"Sticta aff gyalocarpa" = "#74226c",
"Sticta arachnofuliginosa" = "#8D24AAFF",
"Sticta brevior" = "#AB46BBFF",
"Sticta rhizinata" = "#4A138CFF",
"Sticta andina"= "#4F359B",
"Sticta sylvatica" = "#CD92D8FF",
"Sticta parahumboldtii" = "#E0BEE6FF",
"Sticta pseudohumboldtii" ="#F2E5F4FF"), which="col"))
#Anota ASVs according to the family they belong to and selection of colors to use
left.anot = rowAnnotation(Family = tax.t$Family,
col = list(Family = c("f__Acetobacteraceae" = "#351B9E",
"f__Acidobacteriaceae_(Subgroup_1)" = "#B185F0",
"f__Beijerinckiaceae" = "#858FF0",
"f__Deinococcaceae"  = "#3C5488B2",
"f__Caulobacteraceae" = "#F0E685FF",
"f__Sphingobacteriaceae" = "#CA9822",
"f__Sphingomonadaceae" = "#9E771B",
"f__Nostocaceae"= "#849E1B"
)))
### Column order
library("seriation")
genus.ord <- genus[order(genus$species.checked),]
genus.col.ord <- genus.ord$sample.id
#row order
asv.order <- tax.t[order(tax.t$Family, decreasing = TRUE),]
asv.row.ord <- asv.order$ASV_ID
#Heatmap
outfile_HM <- "Meta-analysis/Heatmap_ASV_updated.pdf"
pdf(file = outfile_HM ,   # The directory you want to save the file in
width = 20 ,          # The width of the plot in inches
height = 4.5,
colormodel = "cmyk")  # Color model (cmyk is required for most publications
Heatmap(abd.matrix,
name = "Relative abundance",
row_names_side = "left",
column_names_side = "bottom",
row_dend_side = "left",
#top_annotation = anot,
bottom_annotation = anot2,
left_annotation = left.anot,
rect_gp = gpar(col = "grey"),
col = palette_blues,
show_row_dend = FALSE,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
column_dend_height = unit(0.5, "cm"),
column_title = "Samples",
column_names_rot = 90,
#row_title = "ASV",
column_order = genus.col.ord,
row_order = asv.row.ord)
dev.off()
#Heatmap
outfile_HM <- "Meta-analysis/Heatmap_ASV_updated.pdf"
pdf(file = outfile_HM ,   # The directory you want to save the file in
width = 20 ,          # The width of the plot in inches
height = 4.5,
colormodel = "cmyk")  # Color model (cmyk is required for most publications
Heatmap(abd.matrix,
name = "Relative abundance",
row_names_side = "left",
column_names_side = "bottom",
row_dend_side = "left",
#top_annotation = anot,
bottom_annotation = anot2,
left_annotation = left.anot,
rect_gp = gpar(col = "grey"),
col = palette_blues,
show_row_dend = FALSE,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
column_dend_height = unit(0.5, "cm"),
column_title = "Samples",
column_names_rot = 90,
#row_title = "ASV",
column_order = genus.col.ord,
row_order = asv.row.ord)
dev.off()
