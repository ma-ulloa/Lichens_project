cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(as.numeric(x) >= 1 - as.numeric(y) + 1e-6) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
draw(ht1 + ht2, ht_gap = unit(-70, "mm"))
draw(ht1 + ht2, ht_gap = unit(-20, "mm"))
draw(ht1 + ht2, ht_gap = unit(-100, "mm"))
col1 = colorRamp2(c(-1, 0, 1), c("grey","white","deepskyblue4"))
ht1 = Heatmap(df.dist.br,
rect_gp = gpar(type = "none"),
cluster_rows = FALSE,
cluster_columns = FALSE,
col = col1,
cell_fun = function(j, i, x, y, w, h, fill) {
if(as.numeric(x) <= 1 - as.numeric(y) + 1e-6) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
ht1 = Heatmap(df.dist.br,
rect_gp = gpar(type = "none"),
cluster_rows = TRUE,
cluster_columns = FALSE,
col = col1,
cell_fun = function(j, i, x, y, w, h, fill) {
if(as.numeric(x) <= 1 - as.numeric(y) + 1e-6) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
ht1 = Heatmap(df.dist.br,
rect_gp = gpar(type = "none"),
cluster_rows = TRUE,
cluster_columns = TRUE,
col = col1,
cell_fun = function(j, i, x, y, w, h, fill) {
if(as.numeric(x) <= 1 - as.numeric(y) + 1e-6) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
View(df.dist.br)
ht1 = Heatmap(df.dist.br,
rect_gp = gpar(type = "none"),
cluster_rows = TRUE,
cluster_columns = TRUE,
col = col1,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
od =  hclust(dist(df.dist.br))$order
od =  hclust(dist(df.dist.br))$order
m2 = m[od, od]
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2, rect_gp = gpar(type = "none"),
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
#Load packages to be use
library(phyloseq)
library(data.table)
library(tidyr)
library(ggplot2)
library(ape)
library(vegan)
library(dplyr)
library(tibble)
library(phyloseqCompanion)
library(microViz)
library(ggsci)
library(purrr)
library(RColorBrewer)
library(patchwork)
library(ggsignif)
library(ggsignif)
library(tidyverse)
library(geosphere)
# Import phyloseq object
load("Lichens_clean.RData")
# Create a phyloseq subset for the genus Sterocaulon
physeq.ste <-  subset_samples(ps.rarefied, host_genus == "Stereocaulon")
########### ALPHA DIVERSITY #################
# ASV TABLE
otu_ste <- otu.data.table(physeq.ste)
otu_ste <- column_to_rownames(otu_ste, var = "Sample")
# Metadata
meta_ste <- sample.data.table(physeq.ste)
## Subset for Sterocaulon Atlanticus
st.atlanticus <- c("Sample5", "Sample13", "Sample26",
"Sample27","Sample28", "Sample45",
"Sample51", "Sample80", "Sample85",
"Sample86","Sample89", "Sample89",
"Sample90", "Sample91", "Sample92",
"Sample93","Sample95", "Sample96",
"Sample97", "Sample99", "Sample100",
"Sample139", "Sample140")
ps.stereo <- subset_samples(physeq.ste, sample.id %in% st.atlanticus)
################################################################################
############################### Geospatial analysis ############################
################################################################################
#Longitude and latitude
sample_ste <- ps.stereo %>% sample.data.frame() %>%
arrange(site)
#Join this to phyloseq object
cord_table <- data.frame(Sample.id= sample_ste$sample.id,
Longitude=sample_ste$longitude,
Latitude= sample_ste$latitude) %>%
column_to_rownames(var = "Sample.id") %>%
mutate_at(c('Longitude','Latitude'), as.numeric)
#Calculate the Haversine distance
dist.geo <- distm(cord_table, fun = distHaversine)
rownames(dist.geo) <- sample_ste$sample.id
colnames(dist.geo) <- sample_ste$sample.id
#dist.geo <- dist.geo/1000
dist.geo <- as.matrix(dist.geo)
#Abundance matrix with bray-curtis
br.dist.stereo <- ps.stereo %>% dist_calc(dist = "bray", binary = TRUE)
df.dist.br <- br.dist.stereo@dist %>% as.matrix()
df.dist.br <- df.dist.br[sample_ste$sample.id, sample_ste$sample.id]
library(ComplexHeatmap)
library(circlize)
library(pheatmap)
library(ComplexHeatmap)
library(circlize)
library(pheatmap)
## Create annotation
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","deepskyblue4"))
ht1 = Heatmap(df.dist.br,
rect_gp = gpar(type = "none"),
cluster_rows = TRUE,
cluster_columns = TRUE,
col = col1,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","deepskyblue4"))
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2, rect_gp = gpar(type = "none"),
col = col1,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
View(sample_ste)
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","#2D004B"))
# Abundance colors
palette_purples <- colorRampPalette(colors = c("white", "#2D004B"))(9)
#Anotate samples according to the collection site
anot_bottom = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Species = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E"), which="col"))
#Anotate samples according to the collection site
anot_rigth = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Species = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E"), which="col"))
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_rigth,
rect_gp = gpar(type = "none"),
col = col1,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
View(anot_bottom)
# Abundance colors
palette_purples <- colorRampPalette(colors = c("white", "#2D004B"))(9)
#Anotate samples according to the collection site
anot_bottom = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Species = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
#Anotate samples according to the collection site
anot_rigth = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Species = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_rigth,
rect_gp = gpar(type = "none"),
col = col1,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
#Anotate samples according to the collection site
anot_bottom = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
#Anotate samples according to the collection site
anot_rigth = HeatmapAnnotation(Collection_site = meta_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_rigth,
rect_gp = gpar(type = "none"),
col = col1,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
View(meta_ste)
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","#2D004B"))
# Abundance colors
palette_purples <- colorRampPalette(colors = c("white", "#2D004B"))(9)
#Anotate samples according to the collection site
anot_bottom = HeatmapAnnotation(Collection_site = sample_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
#Anotate samples according to the collection site
anot_rigth = HeatmapAnnotation(Collection_site = sample_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
od =  hclust(dist(df.dist.br))$order
m2 = df.dist.br[od,od]
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_rigth,
rect_gp = gpar(type = "none"),
col = col1,
row_names_gp = gpar(cex=0.9, fontface = "italic"),
column_names_gp = gpar(cex=1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","#2D004B"))
# Abundance colors
palette_purples <- colorRampPalette(colors = c("white", "#2D004B"))(9)
# Create annotation for bottom and right
anot_bottom <- HeatmapAnnotation(Collection_site = sample_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
anot_right <- rowAnnotation(Collection_site = sample_ste$site,
col = list(Collection_site = c("Paramo de Chingaza" ="#1B9E77",
"Paramo de Sumapaz" = "#E6F598",
"Paramo del Verjon" = "#CA9822",
"Volcan de Cerro Machin" = "#351B9E")))
# Order the rows and columns
od <- hclust(dist(df.dist.br))$order
m2 <- df.dist.br[od, od]
# Plot heatmap
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = col1,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
#colors
reversed_palette <- rev(hcl.colors(20, "Blues"))
Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
# Plot heatmap
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
draw(ht1, heatmap_legend_side = "right", heatmap_legend_width = unit(2, "cm"),
row_names_gp = gpar(fontsize = 8), column_names_gp = gpar(fontsize = 8),
grid_row = TRUE, grid_column = TRUE)
draw(ht1, grid_row = TRUE, grid_col = TRUE)
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
draw(ht1, grid_row = TRUE, grid_col = TRUE)
#Distance heatmap
ht2 = Heatmap(dist.geo, rect_gp = gpar(type = "none"), col = col2,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i <= j) {
grid.text(sprintf("%.1f", dist.geo[i, j]), x, y, gp = gpar(fontsize = 10))
}
})
ht2 = Heatmap(dist.geo, rect_gp = gpar(type = "none"), col = "black",
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i <= j) {
grid.text(sprintf("%.1f", dist.geo[i, j]), x, y, gp = gpar(fontsize = 10))
}
})
col1 = colorRamp2(c(0, 0.5, 1), c("grey","white","#2D004B"))
ht2 = Heatmap(dist.geo, rect_gp = gpar(type = "none"), col = col1,
cluster_rows = FALSE, cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i <= j) {
grid.text(sprintf("%.1f", dist.geo[i, j]), x, y, gp = gpar(fontsize = 10))
}
})
draw(ht1 + ht2, ht_gap = unit(-100, "mm"))
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
}
})
ht1
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
} else { # upper triangle
grid.rect(x, y, w, h, gp = gpar(fill = col1[dist.geo[i, j]], col = NA))
}
})
ht1
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
} else { # upper triangle
grid.rect(x, y, w, h, gp = gpar(fill = col1[dist.geo[i, j]], col = NA))
}
})
ht1
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
} else { # upper triangle
grid.rect(x, y, w, h, gp = gpar(fill = col1[dist.geo[i, j]], col = NA))
}
})
ht1
View(otu_rarefy)
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
} else {
grid.text(sprintf("%.1f", dist.geo[i, j]), x, y, gp = gpar(fontsize = 10))
}
})
ht1
ht1 = Heatmap(m2,
name = "Bray-Curtis distance",
bottom_annotation = anot_bottom,
right_annotation = anot_right,
rect_gp = gpar(type = "none"),
col = reversed_palette,
row_names_gp = gpar(cex = 0.9, fontface = "italic"),
column_names_gp = gpar(cex = 1),
cluster_rows = FALSE,
cluster_columns = FALSE,
cell_fun = function(j, i, x, y, w, h, fill) {
if(i >= j) {
grid.rect(x, y, w, h, gp = gpar(fill = fill, col = fill))
} else {
grid.text(sprintf("%.1f", dist.geo[i, j]), x, y, gp = gpar(fontsize = 8))
}
})
ht1
m3 <- round(dist.geo)
View(m3)
m3 <- round(dist.geo)/1000
View(m3)
m3 <- round(dist.geo/1000)
View(m3)
m3 <- round(dist.geo/1000, 2)
View(m3)
m3 <- round(dist.geo/1000, 1)
